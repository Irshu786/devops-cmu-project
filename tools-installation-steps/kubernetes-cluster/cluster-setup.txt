Kubernetes Cluster Creation steps.

For creation of the K8s cluster there are some prerequisites,
The required ports should be open as different services run on different ports. 
i. 30000-32767 for node port services
ii. 10250 Kubelet Api
iii. 10259 Kube-Scheduler
iv. 10257 Kube-controller manager
b. Container runtime, environment where the containers would run.
kubeadm, kubelet and kubectl
While the control plane necessitates kubeadm and kubelet, a worker node demands kubelet, kubectl, and kubeadm.
Kubeadm is a tool used for creating the K8s cluster.
Kubelet is used for ensuring the pods are running, i.e., to ensure pod availability.
Kubectl is a command line tool for interacting with the Kubernetes components.


Apart from the above mentioned prerequisite, below networks are required for K8 cluster creation.

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

a. Container Runtime
There are various container runtimes that can be used, here we have used container-d, which is the environment where the containers will be running.
Below are the steps to configure the same,
# Add Docker's official GPG key:
$ sudo apt-get update

$ sudo apt-get install ca-certificates curl gnupg

$ sudo install -m 0755 -d /etc/apt/keyrings

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

$ sudo chmod a+r /etc/apt/keyrings/docker.gpg


# Add the repository to Apt sources:

$ echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

$ sudo apt-get update

$ sudo apt-get install containerd.io

$ sudo docker run hello-world

$ systemctl status containerd

Get the default cgroup:
ps -p 1

To use the systemd cgroup driver in /etc/containerd/config.toml with runc, set remove all the contents from the file

$ sudo systemctl restart containerd


b. kubeadm, kubelet and kubectl
Steps:
$ sudo apt-get update
$ sudo apt-get install -y apt-transport-https ca-certificates curl
$curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
$ echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

$ sudo apt-get update
$ sudo apt-get install -y kubelet kubeadm kubectl
$ sudo apt-mark hold kubelet kubeadm kubectl

c. Configuring control Plane

$ sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=<ip>

$ mkdir -p $HOME/.kube

$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

$ sudo chown $(id -u):$(id -g) $HOME/.kube/config

check the kubectl command:

$ kubectl get pods

d. Add the networking to the cluster

$ Kubectl 
apply -f
https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

$kubectl edit ds -n kube-system weave-net 

containers:
  env:
  - name: IPALLOC_RANGE
    value: 10.244.0.0/16


e. Join the worker nodes

$ kubeadm join <ip> --token koodby.qwertgh --discovery-token-ca-cert-hash sha256:12rtgfdswer5t68ijnhgt787yt643we


f. Testing
kubectl run nginx --image=nginx 
